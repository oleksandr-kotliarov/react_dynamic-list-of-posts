{"version":3,"sources":["components/PostsList.tsx","components/Loader/Loader.tsx","utils/fetchClient.ts","components/NewCommentForm.tsx","components/PostDetails.tsx","components/UserSelector.tsx","App.tsx","index.tsx"],"names":["PostsList","posts","onOpen","selectedPost","className","map","post","id","title","type","cn","onClick","Loader","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","client","NewCommentForm","postId","addComment","useState","name","setName","email","setEmail","setBody","hasError","setHasError","isSending","setIsSendign","isErrorVisible","useCallback","field","length","handleClear","onSubmit","event","preventDefault","newComment","finally","Math","random","htmlFor","placeholder","value","onChange","target","PostDetails","comments","setComments","isLoading","setIsLoading","isFormOpen","setIsFormOpen","useEffect","commentsFromServer","catch","openFormHandler","prevValue","handleDelete","commentId","filter","el","addNewComment","comment","href","UserSelector","getPosts","onUserChange","users","setUsers","selectedUser","setSelectedUser","isOpen","setIsOpen","wrapperRef","useRef","usersFromServer","handleClickOutside","current","contains","document","addEventListener","removeEventListener","handleOpen","handleSelect","user","ref","role","App","isUserSelected","setIsUserSelected","setPosts","isNoPosts","setIsNoPosts","setSelectedPost","userId","postsFromServer","isPostVisible","classNames","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.94d21376.chunk.js","sourcesContent":["import cn from 'classnames';\nimport React from 'react';\nimport { Post } from '../types/Post';\n\ninterface Props {\n  posts: Post[];\n  onOpen: (newPost: Post) => void;\n  selectedPost: Post | null;\n}\n\nexport const PostsList: React.FC<Props> = ({ posts, onOpen, selectedPost }) => (\n  <div data-cy=\"PostsList\">\n    <p className=\"title\">Posts:</p>\n\n    <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n      <thead>\n        <tr className=\"has-background-link-light\">\n          <th>#</th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {posts.map(post => (\n          <tr data-cy=\"Post\" key={post.id}>\n            <td data-cy=\"PostId\">{post.id}</td>\n\n            <td data-cy=\"PostTitle\">\n              {post.title}\n            </td>\n\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                type=\"button\"\n                data-cy=\"PostButton\"\n                className={cn('button is-link',\n                  { 'is-light': selectedPost !== post })}\n                onClick={() => onOpen(post)}\n              >\n                Open\n              </button>\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  </div>\n);\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { CommentData } from '../types/Comment';\n\nconst BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: CommentData | null = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: CommentData) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: CommentData) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import cn from 'classnames';\nimport React, { FormEvent, useCallback, useState } from 'react';\nimport { Comment, CommentData } from '../types/Comment';\nimport { client } from '../utils/fetchClient';\n\ninterface Props {\n  postId: number;\n  addComment: (newValue: Comment) => void;\n}\n\nexport const NewCommentForm: React.FC<Props> = ({ postId, addComment }) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n  const [hasError, setHasError] = useState(false);\n  const [isSending, setIsSendign] = useState(false);\n\n  const isErrorVisible = useCallback((field: string) => (\n    !field.length && hasError\n  ), [hasError]);\n\n  const handleSubmit = (event: FormEvent) => {\n    event.preventDefault();\n\n    if (!name.length || !email.length || !body.length) {\n      setHasError(true);\n    } else {\n      const newComment = {\n        postId,\n        name,\n        email,\n        body,\n      };\n\n      setIsSendign(true);\n      client.post<CommentData>('/comments', newComment)\n        .finally(() => {\n          setIsSendign(false);\n          setBody('');\n        });\n\n      addComment({ id: Math.random() + postId, ...newComment });\n    }\n  };\n\n  const handleClear = useCallback(() => {\n    setName('');\n    setEmail('');\n    setBody('');\n    setHasError(false);\n  }, []);\n\n  return (\n    <form data-cy=\"NewCommentForm\" onSubmit={handleSubmit}>\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={cn('input',\n              { 'is-danger': isErrorVisible(name) })}\n            value={name}\n            onChange={event => setName(event.target.value)}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {isErrorVisible(name) && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {isErrorVisible(name) && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={cn('input',\n              { 'is-danger': isErrorVisible(email) })}\n            value={email}\n            onChange={event => setEmail(event.target.value)}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {isErrorVisible(email) && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {isErrorVisible(email) && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={cn('textarea',\n              { 'is-danger': isErrorVisible(body) })}\n            value={body}\n            onChange={event => setBody(event.target.value)}\n          />\n        </div>\n\n        {isErrorVisible(body) && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={cn('button is-link',\n              { 'is-loading': isSending })}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={handleClear}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import React, { useCallback, useEffect, useState } from 'react';\nimport { Comment } from '../types/Comment';\nimport { Post } from '../types/Post';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { client } from '../utils/fetchClient';\n\ninterface Props {\n  post: Post;\n}\n\nexport const PostDetails: React.FC<Props> = ({ post }) => {\n  const [hasError, setHasError] = useState(false);\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isFormOpen, setIsFormOpen] = useState(false);\n\n  useEffect(() => {\n    setIsFormOpen(false);\n    setIsLoading(true);\n    client.get<Comment[]>(`/comments?postId=${post?.id}`)\n      .then(commentsFromServer => {\n        setComments(commentsFromServer);\n        setHasError(false);\n      })\n      .catch(() => setHasError(true))\n      .finally(() => setIsLoading(false));\n  }, [post]);\n\n  const openFormHandler = useCallback(() => {\n    setIsFormOpen(prevValue => !prevValue);\n  }, []);\n\n  const handleDelete = useCallback((commentId: number) => {\n    client.delete(`/comments/${commentId}`);\n    setComments(prevValue => prevValue.filter(el => el.id !== commentId));\n  }, []);\n\n  const addNewComment = useCallback((comment: Comment) => {\n    setComments(prevValue => [...prevValue, comment]);\n  }, []);\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${post?.id}: ${post?.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {post?.body}\n          </p>\n        </div>\n\n        {!isLoading\n          ? (\n            <div className=\"block\">\n\n              {hasError && (\n                <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n                  Something went wrong\n                </div>\n              )}\n\n              {!hasError && (!comments.length\n                ? (\n                  <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n                    No comments yet\n                  </p>\n                )\n                : (<p className=\"title is-4\">Comments:</p>))}\n\n              {comments.map(comment => (\n                <article\n                  className=\"message is-small\"\n                  data-cy=\"Comment\"\n                  key={comment.id}\n                >\n                  <div className=\"message-header\">\n                    <a href={`mailto:${comment.email}`} data-cy=\"CommentAuthor\">\n                      {comment.name}\n                    </a>\n                    <button\n                      data-cy=\"CommentDelete\"\n                      type=\"button\"\n                      className=\"delete is-small\"\n                      aria-label=\"delete\"\n                      onClick={() => handleDelete(comment.id)}\n                    >\n                      delete button\n                    </button>\n                  </div>\n\n                  <div className=\"message-body\" data-cy=\"CommentBody\">\n                    {comment.body}\n                  </div>\n                </article>\n              ))}\n\n              {!isFormOpen && !hasError && (\n                <button\n                  data-cy=\"WriteCommentButton\"\n                  type=\"button\"\n                  className=\"button is-link\"\n                  onClick={openFormHandler}\n                >\n                  Write a comment\n                </button>\n              )}\n            </div>\n          )\n          : (<Loader />)}\n\n        {isFormOpen && (\n          <NewCommentForm\n            postId={post.id}\n            addComment={addNewComment}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import React, {\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from 'react';\nimport { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\ninterface Props {\n  getPosts: (userId: number) => void\n  onUserChange: (newValue: null) => void;\n}\n\nexport const UserSelector: React.FC<Props> = ({ getPosts, onUserChange }) => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [isOpen, setIsOpen] = useState(false);\n  const wrapperRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    client.get<User[]>('/users')\n      .then(usersFromServer => setUsers(usersFromServer));\n\n    const handleClickOutside = (event: MouseEvent) => {\n      if (wrapperRef.current\n        && !wrapperRef.current.contains(event.target as HTMLElement)) {\n        setIsOpen(false);\n      }\n    };\n\n    document.addEventListener('click', handleClickOutside);\n\n    return () => {\n      document.removeEventListener('click', handleClickOutside);\n    };\n  }, []);\n\n  const handleOpen = useCallback(() => {\n    setIsOpen(prevValue => !prevValue);\n  }, []);\n\n  const handleSelect = useCallback((user) => {\n    if (user !== selectedUser) {\n      setSelectedUser(user);\n      getPosts(user.id);\n      onUserChange(null);\n    }\n\n    setIsOpen(false);\n  }, [selectedUser]);\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className=\"dropdown is-active\"\n      ref={wrapperRef}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={handleOpen}\n        >\n          <span>{selectedUser?.name || 'Choose a user'}</span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      {isOpen && (\n        <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n          <div className=\"dropdown-content\">\n            {users.map(user => (\n              <a\n                href={`#user-${user.id}`}\n                className=\"dropdown-item\"\n                key={user.id}\n                onClick={() => handleSelect(user)}\n              >\n                {user.name}\n              </a>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import React, { useCallback, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\n\nimport { client } from './utils/fetchClient';\nimport { Post } from './types/Post';\n\nexport const App: React.FC = () => {\n  const [isUserSelected, setIsUserSelected] = useState(false);\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [hasError, setHasError] = useState(false);\n  const [isNoPosts, setIsNoPosts] = useState(false);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n\n  const getPosts = useCallback((userId: number) => {\n    setIsLoading(true);\n    setIsNoPosts(false);\n    setIsUserSelected(true);\n    client.get<Post[]>(`/posts?userId=${userId}`)\n      .then(postsFromServer => {\n        setPosts(postsFromServer);\n        setIsNoPosts(!postsFromServer.length);\n        setHasError(false);\n      })\n      .catch(() => setHasError(true))\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  const isPostVisible = isUserSelected && !hasError && !isNoPosts;\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  getPosts={getPosts}\n                  onUserChange={setSelectedPost}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!isUserSelected && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {hasError && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    Something went wrong!\n                  </div>\n                )}\n\n                {isPostVisible && (isLoading\n                  ? (<Loader />)\n                  : (\n                    <PostsList\n                      posts={posts}\n                      onOpen={setSelectedPost}\n                      selectedPost={selectedPost}\n                    />\n                  ))}\n\n                {isNoPosts && !hasError && (\n                  <div className=\"notification is-warning\" data-cy=\"NoPostsYet\">\n                    No posts yet\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': selectedPost },\n            )}\n          >\n            <div className=\"tile is-child box is-success \">\n              {selectedPost && (<PostDetails post={selectedPost} />)}\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}